/* Test Class name : InstagramPaginatedApisTest
* created Date     : 29/07/2023
* Created By       : shubham kumar
* Last Modfied By  : shubham kumar
* Descritpion      : This class contains all the api's related to instagram.
*/
public class InstagramPaginatedApis {
    //Getting the basic details from custom setting
    private static Instagram_Api_Details__c fap = Instagram_Api_Details__c.getInstance();
    private static final String CLIENT_ID               = fap.CLIENT_ID__c;
    private static String CLIENT_SECRET                 = fap.CLIENT_SECRET__c;
    private static String REDIRECT_URI                  = fap.REDIRECT_URI__c;
    private static String accessToken                   = fap.accessToken__c;
    private static String basicUrl                      = fap.basicUrl__c;
    private static String businessUserId                = fap.businessUserId__c;
    private static String nextPaginationPostToken       = fap.next_Pagination_Post_Token__c;
    private static String nextPaginationMentionToken    = fap.next_Pagination_Mention_Token__c;
    private static String nextPaginationHashTagToken    = fap.next_pagination_hashtag_Token__c;
    private static String hashtagName                   = fap.HashTag__c; 
    //Getting the record Type Id
    private static Id caseRecordTypeId                  = Schema.SObjectType.case.getRecordTypeInfosByName().get('Instagram').getRecordTypeId();
    
    @Future(callout=true)
    public static void getNextBatchOfPostsFromInsta(){
        system.debug('nextPaginationPostToken--'+nextPaginationPostToken);
        if(nextPaginationPostToken != null){
            List<case> insertedCaseList 										= new List<case>();
            List<Post_Comments__c> newpostCommentList                           = new List<Post_Comments__c>();
            List<Post_Comments__c> newpostCommentForExistingPosts               = new List<Post_Comments__c>();
            List<Post_Comments__c> postCommentsForExistingPostsToBeInserted     = new List<Post_Comments__c>();
            List<Post_Comments__c> postCommentListToBeUpdated                   = new List<Post_Comments__c>();
            List<Id> caseIdsToBeUpdated                                         = new List<Id>();
            map<String,List<Post_Comments__c>> commentsOnPostByPostId           = new map<String,List<Post_Comments__c>>();
            map<String,String> caseIdByPostId                                   = new map<String,String>();
            map<String,String> postCommentIdByPostId                            = new map<String,String>();
            map<String,String> caseIdByPostCommentId                            = new map<String,String>();
            List<String> casePostIds                                            = new List<String>();
            
            List<case> existingCaseList = [Select id,subject,Description,Caption__c,Post_Id__c from case where recordTypeId = :caseRecordTypeId and Origin = 'Instagram'];
            List<Post_Comments__c> postCommentDataList = new List<Post_Comments__c>();
            postCommentDataList  = [Select Comment__c,Comment_Id__c,case__c,Case__r.Post_Id__c,Commented_By__c,Post_Url__c,Post_comment_Time__c from Post_Comments__c where case__c IN :existingCaseList ]; 
            
            for(Post_Comments__c postCommRec : postCommentDataList){
                postCommentIdByPostId.put(postCommRec.Comment_Id__c,postCommRec.Id);
                caseIdByPostCommentId.put(postCommRec.Comment_Id__c,postCommRec.Case__c);
                if(commentsOnPostByPostId.containsKey(postCommRec.Case__c)){
                    commentsOnPostByPostId.get(postCommRec.Case__r.Post_Id__c).add(postCommRec);
                }else{
                    list<Post_Comments__c> postCommNewList = new list<Post_Comments__c>();
                    postCommNewList.add(postCommRec);
                    commentsOnPostByPostId.put(postCommRec.Case__r.Post_Id__c,postCommNewList);
                }
            }
            
            for(Case caseRec : existingCaseList){
                list<Post_Comments__c> postCommNewList = new list<Post_Comments__c>();
                caseIdByPostId.put(caseRec.Post_Id__c,caseRec.Id);
                if(!commentsOnPostByPostId.keyset().contains(caseRec.Post_Id__c)){
                    commentsOnPostByPostId.put(caseRec.Post_Id__c,postCommNewList);
                }
            }
            system.debug('commentsOnPostByPostId'+commentsOnPostByPostId);
            String endpointUrl = 'https://graph.facebook.com/v17.0/'+businessUserId+'/media';
            String fieldsParam = 'fields=media_url,comments_count,permalink,caption,media_type,shortcode,timestamp,username,comments.limit(50){id,like_count,user,media,timestamp,username,replies{text,username,timestamp},text}&limit=50&after='+nextPaginationPostToken;
            Id caseRecordTypeId = Schema.SObjectType.case.getRecordTypeInfosByName().get('Instagram').getRecordTypeId();
            String fullUrl = endpointUrl + '?' + fieldsParam + '&access_token=' + accessToken;
            
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint(fullUrl);
            request.setMethod('GET');
            
            HttpResponse response = http.send(request);
            System.debug('response.getBody() === > '+response.getBody());
            FacebookApiResponse responseWrapper = (FacebookApiResponse) JSON.deserialize(response.getBody(), FacebookApiResponse.class);
            system.debug('responseWrapper'+responseWrapper);
            
            if( responseWrapper.data.size() == 50){
                system.debug('50 cases are there lets proceed'+responseWrapper.paging.cursors.after);
                Instagram_Api_Details__c instaSetting = Instagram_Api_Details__c.getOrgDefaults();
                instaSetting.Id = instaSetting.Id;
                instaSetting.next_Pagination_Post_Token__c = responseWrapper.paging.cursors.after;
                update instaSetting;
            }else{
                system.debug('50 cases are there lets proceed'+responseWrapper.paging.cursors.after);
                Instagram_Api_Details__c instaSetting = Instagram_Api_Details__c.getOrgDefaults();
                instaSetting.Id = instaSetting.Id;
                instaSetting.next_Pagination_Post_Token__c = null;
                update instaSetting;
            }
            
            for(FacebookApiResponse.DataWrapper postInfo : responseWrapper.data){
                System.debug('postInfo === >'+postInfo);
                if(!commentsOnPostByPostId.keyset().contains(postInfo.Id)){
                    Case newCase = new case();
                    newCase.Related_to__c = postInfo.username;
                    newCase.Brand__c      = 'Hyphen';
                    newCase.Origin        = 'Instagram';
                    newCase.Post_Id__c = postInfo.id;
                    newcase.Created_Time__c = String.valueOf(postInfo.timestamp).removeEnd('+0000');
                    newcase.POST_URL__c = postInfo.permalink;
                    newcase.recordtypeId = caseRecordTypeId;
                    if((postInfo.comments != null)){
                        newcase.Comments_JSON__c = string.valueOf(postInfo.comments.data);
                    }
                    newcase.Priority = 'High';
                    newcase.Type_of_Post__c = 'Post';
                    newcase.Subject = 'Post from instagram.Related to '+postInfo.username+'. Created Date-Time : '+newcase.Created_Time__c;
                    newcase.Description = postInfo.caption;
                    if(!commentsOnPostByPostId.keyset().contains(newCase.Post_Id__c)){
                        insert newcase;
                        insertedCaseList.add(newcase);
                    }
                    if((postInfo.comments != null)){
                        if(newcase.Id != null){
                            for(FacebookApiResponse.CommentData postInfoRec : postInfo.comments.data){
                                Post_Comments__c commentRec = new Post_Comments__c();
                                commentRec.Case__c = newcase.Id;
                                commentRec.Comment__c = postInfoRec.text;
                                commentRec.Comment_Id__c = postInfoRec.Id;
                                commentRec.Commented_By__c = postInfoRec.username;
                                commentRec.Post_comment_Time__c = postInfoRec.timestamp;
                                commentRec.Replied_Comments__c = string.valueOf(postInfoRec.replies);
                                commentRec.Post_Url__c	 = postInfo.permalink;
                                newpostCommentList.add(commentRec);
                            }      
                        }
                    }
                }else{
                    if(postInfo.comments != null){
                        for(FacebookApiResponse.CommentData postInfoRec : postInfo.comments.data){
                            if(commentsOnPostByPostId.containsKey(postInfo.Id)){
                                List<String> postCommentIds = new List<String>();
                                if(commentsOnPostByPostId.get(postInfo.Id).size() > 0){
                                    for(Post_Comments__c poCom :  commentsOnPostByPostId.get(postInfo.Id)){
                                        postCommentIds.add(poCom.Comment_Id__c);
                                    }    
                                }
                                if(!postCommentIds.contains(postInfoRec.Id)){
                                    Post_Comments__c commentRec = new Post_Comments__c();
                                    commentRec.Case__c = caseIdByPostId.get(postInfo.Id);
                                    commentRec.Comment__c = postInfoRec.text;
                                    commentRec.Comment_Id__c = postInfoRec.Id;
                                    commentRec.Commented_By__c = postInfoRec.username;
                                    commentRec.Post_comment_Time__c = postInfoRec.timestamp;
                                    commentRec.Post_Url__c	 = postInfo.permalink;
                                    commentRec.Replied_Comments__c = string.valueOf(postInfoRec.replies);
                                    newpostCommentForExistingPosts.add(commentRec);
                                }else{
                                    //This will come here comments have to be updated..
                                    Post_Comments__c commentRec = new Post_Comments__c();
                                    commentRec.Id = postCommentIdByPostId.get(postInfoRec.Id);
                                    if(caseIdByPostCommentId.ContainsKey(postInfoRec.Id)){
                                        caseIdsToBeUpdated.add(caseIdByPostCommentId.get(postInfoRec.Id));    
                                    }
                                    commentRec.Replied_Comments__c = string.valueOf(postInfoRec.replies);
                                    postCommentListToBeUpdated.add(commentRec);
                                }
                            }
                        }
                    }else{
                        system.debug('postInfo.comments'+postInfo.comments);
                    }
                }
            }
            
            for(Post_Comments__c postCommRec : newpostCommentForExistingPosts){
                if(postCommentIdByPostId.keySet().contains(postCommRec.Comment_Id__c)){
                    
                }else{
                    postCommentsForExistingPostsToBeInserted.add(postCommRec);
                }
            }
            
            
            system.debug('These cases have new comments do have a look'+insertedCaseList.size());
            //This is for new Posts that are inserted :
            if(postCommentsForExistingPostsToBeInserted.size() > 0){
                Database.insert(postCommentsForExistingPostsToBeInserted, false);    
            }
            
            if(postCommentListToBeUpdated.size() > 0){
                Database.update(postCommentListToBeUpdated,false);
            }
        }else{
            InstagramAuthHelper.getAllPostsFromInstaForUserId();
        }
    }
    
    @Future(callout=true)
    public static void getNextBatchOfMentionsFromInsta(){
        if(nextPaginationMentionToken != null){
            List<case> insertedCaseList 										= new List<case>();
            List<Post_Comments__c> newpostCommentList                           = new List<Post_Comments__c>();
            List<Post_Comments__c> newpostCommentForExistingPosts               = new List<Post_Comments__c>();
            List<Post_Comments__c> postCommentsForExistingPostsToBeInserted     = new List<Post_Comments__c>();
            List<Post_Comments__c> postCommentListToBeUpdated                   = new List<Post_Comments__c>();
            List<Id> caseIdsToBeUpdated                                         = new List<Id>();
            map<String,List<Post_Comments__c>> commentsOnPostByPostId           = new map<String,List<Post_Comments__c>>();
            map<String,String> caseIdByPostId                                   = new map<String,String>();
            map<String,String> postCommentIdByPostId                            = new map<String,String>();
            map<String,String> caseIdByPostCommentId                            = new map<String,String>();
            List<String> casePostIds                                            = new List<String>();
            
            List<case> existingCaseList = [Select id,subject,Description,Caption__c,Post_Id__c from case where recordTypeId = :caseRecordTypeId and Origin = 'Instagram'];
            List<Post_Comments__c> postCommentDataList = new List<Post_Comments__c>();
            postCommentDataList  = [Select Comment__c,Comment_Id__c,case__c,Case__r.Post_Id__c,Commented_By__c,Post_Url__c,Post_comment_Time__c from Post_Comments__c where case__c IN :existingCaseList ]; 
            
            for(Post_Comments__c postCommRec : postCommentDataList){
                postCommentIdByPostId.put(postCommRec.Comment_Id__c,postCommRec.Id);
                caseIdByPostCommentId.put(postCommRec.Comment_Id__c,postCommRec.Case__c);
                if(commentsOnPostByPostId.containsKey(postCommRec.Case__c)){
                    commentsOnPostByPostId.get(postCommRec.Case__r.Post_Id__c).add(postCommRec);
                }else{
                    list<Post_Comments__c> postCommNewList = new list<Post_Comments__c>();
                    postCommNewList.add(postCommRec);
                    commentsOnPostByPostId.put(postCommRec.Case__r.Post_Id__c,postCommNewList);
                }
            }
            
            for(Case caseRec : existingCaseList){
                list<Post_Comments__c> postCommNewList = new list<Post_Comments__c>();
                caseIdByPostId.put(caseRec.Post_Id__c,caseRec.Id);
                if(!commentsOnPostByPostId.keyset().contains(caseRec.Post_Id__c)){
                    commentsOnPostByPostId.put(caseRec.Post_Id__c,postCommNewList);
                }
            }
            system.debug('commentsOnPostByPostId'+commentsOnPostByPostId);
            String endpointUrl = 'https://graph.facebook.com/v17.0/'+businessUserId+'/tags';
            String fieldsParam = 'fields=media_url,comments_count,permalink,caption,media_type,shortcode,timestamp,username,comments.limit(50){id,like_count,user,media,timestamp,username,replies{text,username,timestamp},text}&limit=50&after='+nextPaginationMentionToken;
            Id caseRecordTypeId = Schema.SObjectType.case.getRecordTypeInfosByName().get('Instagram').getRecordTypeId();
            String fullUrl = endpointUrl + '?' + fieldsParam + '&access_token=' + accessToken;
            
            Http http = new Http();
            HttpRequest request = new HttpRequest();
            request.setEndpoint(fullUrl);
            request.setMethod('GET');
            
            HttpResponse response = http.send(request);
            System.debug('response.getBody() === > '+response.getBody());
            FacebookApiResponse responseWrapper = (FacebookApiResponse) JSON.deserialize(response.getBody(), FacebookApiResponse.class);
            if( responseWrapper.data.size() == 50){
                system.debug('50 cases are there lets proceed'+responseWrapper.paging.cursors.after);
                Instagram_Api_Details__c instaSetting = Instagram_Api_Details__c.getOrgDefaults();
                instaSetting.Id = instaSetting.Id;
                instaSetting.next_Pagination_Mention_Token__c = responseWrapper.paging.cursors.after;
                update instaSetting;
            }else{
                system.debug('50 cases are there lets proceed'+responseWrapper.paging.cursors.after);
                Instagram_Api_Details__c instaSetting = Instagram_Api_Details__c.getOrgDefaults();
                instaSetting.Id = instaSetting.Id;
                instaSetting.next_Pagination_Mention_Token__c = null;
                update instaSetting;
            }
            
            for(FacebookApiResponse.DataWrapper postInfo : responseWrapper.data){
                System.debug('postInfo === >'+postInfo);
                if(!commentsOnPostByPostId.keyset().contains(postInfo.Id)){
                    Case newCase = new case();
                    newCase.Related_to__c = postInfo.username;
                    newCase.Brand__c      = 'Hyphen';
                    newCase.Origin        = 'Instagram';
                    newCase.Post_Id__c = postInfo.id;
                    newcase.Created_Time__c = String.valueOf(postInfo.timestamp).removeEnd('+0000');
                    newcase.POST_URL__c = postInfo.permalink;
                    newcase.recordtypeId = caseRecordTypeId;
                    if((postInfo.comments != null)){
                        newcase.Comments_JSON__c = string.valueOf(postInfo.comments.data);
                    }
                    newcase.Priority = 'High';
                    newcase.Type_of_Post__c = 'Post';
                    newcase.Subject = 'Post from instagram.Related to '+postInfo.username+'. Created Date-Time : '+newcase.Created_Time__c;
                    newcase.Description = postInfo.caption;
                    if(!commentsOnPostByPostId.keyset().contains(newCase.Post_Id__c)){
                        insert newcase;
                        insertedCaseList.add(newcase);
                    }
                    if((postInfo.comments != null)){
                        if(newcase.Id != null){
                            for(FacebookApiResponse.CommentData postInfoRec : postInfo.comments.data){
                                Post_Comments__c commentRec = new Post_Comments__c();
                                commentRec.Case__c = newcase.Id;
                                commentRec.Comment__c = postInfoRec.text;
                                commentRec.Comment_Id__c = postInfoRec.Id;
                                commentRec.Commented_By__c = postInfoRec.username;
                                commentRec.Post_comment_Time__c = postInfoRec.timestamp;
                                commentRec.Replied_Comments__c = string.valueOf(postInfoRec.replies);
                                commentRec.Post_Url__c	 = postInfo.permalink;
                                newpostCommentList.add(commentRec);
                            }      
                        }
                    }
                }else{
                    if(postInfo.comments != null){
                        for(FacebookApiResponse.CommentData postInfoRec : postInfo.comments.data){
                            if(commentsOnPostByPostId.containsKey(postInfo.Id)){
                                List<String> postCommentIds = new List<String>();
                                if(commentsOnPostByPostId.get(postInfo.Id).size() > 0){
                                    for(Post_Comments__c poCom :  commentsOnPostByPostId.get(postInfo.Id)){
                                        postCommentIds.add(poCom.Comment_Id__c);
                                    }    
                                }
                                if(!postCommentIds.contains(postInfoRec.Id)){
                                    Post_Comments__c commentRec = new Post_Comments__c();
                                    commentRec.Case__c = caseIdByPostId.get(postInfo.Id);
                                    commentRec.Comment__c = postInfoRec.text;
                                    commentRec.Comment_Id__c = postInfoRec.Id;
                                    commentRec.Commented_By__c = postInfoRec.username;
                                    commentRec.Post_comment_Time__c = postInfoRec.timestamp;
                                    commentRec.Post_Url__c	 = postInfo.permalink;
                                    commentRec.Replied_Comments__c = string.valueOf(postInfoRec.replies);
                                    newpostCommentForExistingPosts.add(commentRec);
                                }else{
                                    //This will come here comments have to be updated..
                                    Post_Comments__c commentRec = new Post_Comments__c();
                                    commentRec.Id = postCommentIdByPostId.get(postInfoRec.Id);
                                    if(caseIdByPostCommentId.ContainsKey(postInfoRec.Id)){
                                        caseIdsToBeUpdated.add(caseIdByPostCommentId.get(postInfoRec.Id));    
                                    }
                                    commentRec.Replied_Comments__c = string.valueOf(postInfoRec.replies);
                                    postCommentListToBeUpdated.add(commentRec);
                                }
                            }
                        }
                    }else{
                        system.debug('postInfo.comments'+postInfo.comments);
                    }
                }
            }
            
            for(Post_Comments__c postCommRec : newpostCommentForExistingPosts){
                if(postCommentIdByPostId.keySet().contains(postCommRec.Comment_Id__c)){
                    
                }else{
                    postCommentsForExistingPostsToBeInserted.add(postCommRec);
                }
            }
            
            
            system.debug('These cases have new comments do have a look'+insertedCaseList.size());
            //This is for new Posts that are inserted :
            if(postCommentsForExistingPostsToBeInserted.size() > 0){
                Database.insert(postCommentsForExistingPostsToBeInserted, false);    
            }
            
            if(postCommentListToBeUpdated.size() > 0){
                Database.update(postCommentListToBeUpdated,false);
            }
        }else{
            InstagramAuthHelper.getAllMentionsFromInstaForUserId();
        }
    }
    
    
}