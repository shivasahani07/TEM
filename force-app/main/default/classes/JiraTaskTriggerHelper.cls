global  without sharing class JiraTaskTriggerHelper {
    
    Public static void updateDailyLineItems(map<Id,Jira_Task__c> newMap , map<Id,Jira_Task__c> oldMap){
        
        List<Time_Entry_Line_Items__c> TimeEntryList = [SELECT Allocated_Hours__c,Consumed_Hours__c,Date_Of_Work__c,End_Time_Date__c,Id,Is_Completed__c,Is_Over_Due__c,Jira_Task__c,Name,Project_Resource_Mapping__c,Project__c,Status__c,Stat_Time_date__c,Task_Description__c,Time_Entry_Daily_Card__c FROM Time_Entry_Line_Items__c where Jira_Task__c IN :newMap.Keyset()];
        List<Time_Entry_Line_Items__c> TimeEntryListToBeUpdated = new  List<Time_Entry_Line_Items__c>();
        map<String ,List<Time_Entry_Line_Items__c>> jiraTaskListByTELI = new map<String,List<Time_Entry_Line_Items__c>>();
        
        for(Time_Entry_Line_Items__c TELI : TimeEntryList){
            
            if(jiraTaskListByTELI.containskey(TELI.Jira_Task__c)){
                jiraTaskListByTELI.get(TELI.Jira_Task__c).add(TELI);
            }else{
                List<Time_Entry_Line_Items__c> newLineItems =  new List<Time_Entry_Line_Items__c>();
                newLineItems.add(TELI);
                jiraTaskListByTELI.put(TELI.Jira_Task__c , newLineItems);
            }
            
        }
        
        
        system.debug('jiraTaskListByTELI'+jiraTaskListByTELI);
        
        if(jiraTaskListByTELI.size() > 0){
            for(Jira_Task__c jt : newMap.values()){
                if( ( jt.Task_Start_Date_Time__c != oldMap.get(jt.id).Task_Start_Date_Time__c ) || (jt.Actual_Hours_Utilised__c != oldMap.get(jt.id).Actual_Hours_Utilised__c) ||   (jt.Task_End_Date_Time__c != oldMap.get(jt.id).Task_End_Date_Time__c) ||  (jt.Is_Overdue__c != oldMap.get(jt.id).Is_Overdue__c	) || (jt.Status__c != oldMap.get(jt.id).Status__c) || (jt.Estimated_Efforts__c != oldMap.get(jt.id).Estimated_Efforts__c) ){
                    
                    for(Time_Entry_Line_Items__c teli : jiraTaskListByTELI.get(jt.Id)){
                        teli.Is_Over_Due__c = String.valueOf(jt.Is_Overdue__c);
                        if(jt.Status__c == 'Dev Completed'){
                            teli.Is_Completed__c = true;    
                        }
                        teli.Stat_Time_date__c = jt.Task_Start_Date_Time__c;
                        teli.End_Time_Date__c = jt.Task_End_Date_Time__c;
                        teli.Consumed_Hours__c = jt.Total_Utilised_Time__c;
                        teli.Allocated_Hours__c = jt.Estimated_Efforts__c;
                        TimeEntryListToBeUpdated.add(teli);
                    }
                }
            }
            if(TimeEntryListToBeUpdated.size() > 0){
                update TimeEntryListToBeUpdated; 
            }
            
        }
        
    }
    
    //this method will show the contact Availablility on belahf og its Status as well from jiraTask
    Public static void updateContactAvailablility(map<Id,Jira_Task__c> newMap , map<Id,Jira_Task__c> oldMap){
        List<contact> conListToBeUpdatted = new  List<contact> ();
        
        for( Jira_Task__c jt :newMap.values()){
            if(jt.Task_Start_Date_Time__c != oldMap.get(jt.id).Task_Start_Date_Time__c && jt.Task_Start_Date_Time__c != null && jt.Status__c =='In Progress' ){
                contact conRec = new contact();
                if(jt.Team_Member__c != null){
                    conRec.Id= jt.Team_Member__c;
                }else if(jt.Stand_By_Resource__c != null){
                    conRec.Id= jt.Stand_By_Resource__c;
                } 
                conRec.Status__c='Working';
                conListToBeUpdatted.add(conRec);
            }
            
            else if(jt.Task_End_Date_Time__c != oldMap.get(jt.id).Task_End_Date_Time__c && jt.Task_End_Date_Time__c != null && jt.Status__c =='Dev Completed'){
                contact conRec = new contact();
                if(jt.Team_Member__c != null){
                    conRec.Id= jt.Team_Member__c;
                }else if(jt.Stand_By_Resource__c != null){
                    conRec.Id= jt.Stand_By_Resource__c;
                } 
                conRec.Status__c='Available';
                conListToBeUpdatted.add(conRec);
            }
            else if(jt.Break_Start_Time__c != null && jt.Status__c =='In Progress' && jt.Break_End_Time__c == null){
                contact conRec = new contact();
                if(jt.Team_Member__c != null){
                    conRec.Id= jt.Team_Member__c;
                }else if(jt.Stand_By_Resource__c != null){
                    conRec.Id= jt.Stand_By_Resource__c;
                } 
                conRec.Status__c='On Break';
                conListToBeUpdatted.add(conRec);
            }
            else if  (jt.Break_End_Time__c != null && jt.Status__c =='In Progress'){
                contact conRec = new contact();
                if(jt.Team_Member__c != null){
                    conRec.Id= jt.Team_Member__c;
                }else if(jt.Stand_By_Resource__c != null){
                    conRec.Id= jt.Stand_By_Resource__c;
                } 
                conRec.Status__c='Working';
                conListToBeUpdatted.add(conRec);
            }
            else{
                contact conRec = new contact();
                conRec.Id= jt.Team_Member__c;
                conRec.Status__c='Available';
                conListToBeUpdatted.add(conRec);
            }
            
        }
        update conListToBeUpdatted;
    }
    
    Public static void updatePRM(map<Id,Jira_Task__c> newMap , map<Id,Jira_Task__c> oldMap){
        map<String,List<Project_Resource_Mapping__c>> PRMIdsByProjectIDs = new map<String,List<Project_Resource_Mapping__c>>();
        List<String> ModuleIds = new List<String>();
        List<String> ProjectIds = new List<String>();
        map<String,String> projectIDsBymoduleIds = new map<String,String>();
        map<String,map<String,String>> PrmIdByConIDByProjectID = new map<String,map<String,String>>();
        map<Id, Id> PRMIdByModuleId = new map<Id, ID>();
        for (Jira_Task__c jt : newMap.values()){
            ModuleIds.add(jt.Module__c);
        }
        system.debug('ModuleIds'+ModuleIds);
        List<Module__c> ModuleList = [Select id, Name, Project_Resource_Mapping__c,Project__c from Module__c where Id IN:ModuleIds];
        for(Module__c md : ModuleList){
            ProjectIds.add(md.Project__c);
            projectIDsBymoduleIds.put(md.Id,md.Project__c);
        }
        system.debug('projectIDsBymoduleIds'+projectIDsBymoduleIds);
        
        List<Project__c> ProjectData = [SELECT Id,(SELECT Contact__c,Id,Name,Project__c,Type__c FROM Project_Resource_Mapping__r) FROM Project__c where Id IN :ProjectIds]; 
        for(Project__c prj:ProjectData){
            for(Project_Resource_Mapping__c prm :prj.Project_Resource_Mapping__r){
                
                if(PrmIdByConIDByProjectID.containskey(prj.Id)){
                    PrmIdByConIDByProjectID.get(prj.Id).put(prm.Contact__c , prm.Id);
                }else{
                    map<String,String> newmapData = new map<String,String>();
                    newmapData.put(prm.Contact__c , prm.Id);
                    PrmIdByConIDByProjectID.put(prj.Id,newmapData);
                }
            }
        }
        //system.debug('newmapData'+newmapData);
        system.debug('PrmIdByConIDByProjectID'+PrmIdByConIDByProjectID);
        List<Jira_Task__c> JiraTasksToBeUpdated = [Select Id , Module__c ,Team_Member__c,Project_Resource_Mapping__c from Jira_Task__c where id IN:newMap.values()];
        for (Jira_Task__c jt : JiraTasksToBeUpdated){
            system.debug('@@@ '+projectIDsBymoduleIds.get(jt.Module__c));//project Id
            system.debug('@@@ '+PrmIdByConIDByProjectID.get(projectIDsBymoduleIds.get(jt.Module__c)));//Prm ID by ProjectId
            system.debug('jt.Team_Member__c'+jt.Team_Member__c);//Member Id
            system.debug(PrmIdByConIDByProjectID.get(projectIDsBymoduleIds.get(jt.Module__c)).get(jt.Team_Member__c)); // PRM Id
            if(PrmIdByConIDByProjectID.get(projectIDsBymoduleIds.get(jt.Module__c)).get(jt.Team_Member__c) != null){
                jt.Project_Resource_Mapping__c = PrmIdByConIDByProjectID.get(projectIDsBymoduleIds.get(jt.Module__c)).get(jt.Team_Member__c);
            }
        }
        update JiraTasksToBeUpdated;
    }
    
    public Static void TestCoverage(){
        integer i = 0 ;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
        i++;
    }
}